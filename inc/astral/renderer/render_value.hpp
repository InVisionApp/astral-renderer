/*!
 * \file render_value.hpp
 * \brief file render_value.hpp
 *
 * Copyright 2019 by InvisionApp.
 *
 * Contact: kevinrogovin@invisionapp.com
 *
 * This Source Code Form is subject to the
 * terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with
 * this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 *
 */

#ifndef ASTRAL_RENDER_VALUE_HPP
#define ASTRAL_RENDER_VALUE_HPP

#include <stdint.h>

namespace astral
{
  ///@cond
  class RenderBackend;
  class RenderEncoderBase;
  class RenderEncoderMask;
  ///@endcond

/*!\addtogroup Renderer
 * @{
 */

  enum
    {
      /*!
       * Enumeration value for a cookie of \ref RenderValue
       * indicate that a \ref RenderValue is a "null"-value.
       */
      InvalidRenderValue = ~0u,
    };

  /*!
   * \brief
   * An astral::RenderValue represents a typed handle to data
   * cached/stored by astral::Renderer. These handle values
   * are only valid for the generating astral::Renderer within
   * the Renderer::begin() / Renderer::end() pair that
   * they were generated in.
   */
  template<typename T>
  class RenderValue
  {
  public:
    RenderValue(void):
      m_cookie(InvalidRenderValue),
      m_begin_cnt(0),
      m_backend(nullptr)
    {}

    /*!
     * Returns true if this \ref RenderValue is
     * valid for use. Valid means both that it
     * was created by an astral::RenderBackend
     * and the RenderBackend::end() has not been
     * called since it was created.
     */
    bool
    valid(void) const;

    /*!
     * Returns true if this \ref RenderValue
     * is valid for the specified RenderEncoderMask
     */
    bool
    valid_for(const RenderEncoderMask &p) const;

    /*!
     * Returns true if this \ref RenderValue
     * is valid for the specified RenderEncoderBase
     */
    bool
    valid_for(const RenderEncoderBase &p) const;

    /*!
     * Returns the actual value.
     */
    const T&
    value(void) const;

    /*!
     * Returns the astral::RenderBackend with which this
     * astral::RenderValue may be used. If valid() returns
     * false, then returns nullptr.
     */
    RenderBackend*
    backend(void) const
    {
      return valid() ?
        m_backend :
        nullptr;
    }

    /*!
     * Comparison operator
     * \param rhs value against which to compare
     */
    bool
    operator==(const RenderValue &rhs) const
    {
      return (valid() == rhs.valid()
              && m_cookie == rhs.m_cookie);
    }

    /*!
     * Comparison operator
     * \param rhs value against which to compare
     */
    bool
    operator!=(const RenderValue &rhs) const
    {
      return !operator==(rhs);
    }

    /*!
     * Returns the cookie generated by an implementation
     * of \ref RenderBackend. Such a \ref RenderBackend
     * will use the cookie to fetch into its own internal
     * stores of the GPU data needed to send to the GPU.
     */
    uint32_t
    cookie(void) const
    {
      return m_cookie;
    }

  private:
    friend class RenderBackend;
    friend class RenderEncoderBase;

    void
    init(uint32_t v, RenderBackend &r);

    uint32_t m_cookie;
    uint32_t m_begin_cnt;
    RenderBackend *m_backend;
  };

/*! @} */
}

#endif
