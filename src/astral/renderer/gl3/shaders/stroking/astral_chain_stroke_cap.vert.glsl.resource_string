// -*- C++ -*-
/*!
 * \file astral_chain_stroke_cap.vert.glsl.resource_string
 * \brief astral_chain_stroke_cap.vert.glsl.resource_string
 *
 * Copyright 2020 by InvisionApp.
 *
 * Contact kevinrogovin@invisionapp.com
 *
 * This Source Code Form is subject to the
 * terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with
 * this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 *
 */

vec2
astral_vert_shader(in uint sub_shader, in uint item_data_location,
                   in vec4 a0,
                   in AstralTransformation tr)
{
  vec2 p;

  #ifdef ASTRAL_STROKING_WITH_DASHING
    {
      astral_dash_pattern dash;

      astral_load_dash_pattern(astral_chain_stroke_edge_length,
                               astral_chain_stroke_contour_length,
                               item_data_location, dash);

      /* cap is never killed if dash corner is positive */
      if (dash.m_header.m_dash_corner <= 0.0)
        {
          float d;

          d = astral_compute_dash_distance(astral_chain_stroke_distance_along_contour, dash);
          if (astral_stroke_cap_style(sub_shader) == ASTRAL_STROKE_CAP_STYLE_SQUARE_CAP)
            {
              d += astral_chain_stroke_radius;
            }

          if (d < 0.0)
            {
              astral_chain_stroke_offset_vector_x = 0.0;
              astral_chain_stroke_offset_vector_y = 0.0;
            }
        }
    }
  #endif

  /* Like the join fragment shaders, the cap fragment shader are setup so that they
   * operate in a coordinate system where the stroke radius is 1. To nudge 1 pixel
   * futher we stretch the offset vector by the ratio of the inflated radius to the
   * actual stroke radius.
   *
   * For the rounded caps, it is critical that we stretch the varyings
   * astral_chain_stroke_offset_vector_x and astral_chain_stroke_offset_vector_y
   * because those are the varying it uses in the fragment shader to compute
   * the normalized distance to the path point.
   */
  astral_chain_stroke_offset_vector_x *= astral_chain_stroke_vertex_to_fragment_radius_ratio;
  astral_chain_stroke_offset_vector_y *= astral_chain_stroke_vertex_to_fragment_radius_ratio;

  p.x = astral_chain_stroke_position_x + astral_chain_stroke_radius * astral_chain_stroke_offset_vector_x;
  p.y = astral_chain_stroke_position_y + astral_chain_stroke_radius * astral_chain_stroke_offset_vector_y;

  #ifdef astral_chain_stroke_normalized_distance_to_path
    {
      /* The square cap shader has this value as 0.0 for the point
       * on the path and as 1.0 for points on the cap boundary. By
       * multiplying by ratio we make its fragment shader do the
       * right thing.
       */
      astral_chain_stroke_normalized_distance_to_path *= astral_chain_stroke_vertex_to_fragment_radius_ratio;
    }
  #endif

  /* p is in local coordinate, put into pixel coordinates */
  return astral_apply_transformation(tr, p);
}
