// -*- C++ -*-
/*!
 * \file astral_banded_rays_neighbor_pixel.glsl.resource_string
 * \brief astral_banded_rays_neighbor_pixel.glsl.resource_string
 *
 * Copyright 2019 by InvisionApp.
 *
 * Contact: kevinrogovin@invisionapp.com
 *
 * This Source Code Form is subject to the
 * terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with
 * this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 *
 */


/*!\addtogroup GLSLItemPath
 * @{
 */

/* Tracks the winding number and closest curve at the pixel and
 * at the neighboring pixels.
 */
struct astral_banded_rays_band_value_check_neighbors
{
  vec3 m_distance;
  ivec3 m_winding;
};

/* An astral_banded_rays_value_check_neighbors for each dimension */
struct astral_banded_rays_value_check_neighbors
{
  astral_banded_rays_band_value_check_neighbors m_horizontal, m_vertical;
  float m_max_distance;
};

void
astral_banded_rays_init_band_value(in float em, out astral_banded_rays_band_value_check_neighbors V)
{
  em *= 2.0;
  V.m_winding = ivec3(0, 0, 0);
  V.m_distance = vec3(em, em, em);
}

void
astral_banded_rays_process_curve_helper_incr(float x, inout astral_banded_rays_band_value_check_neighbors V)
{
  V.m_winding.x += int(step(-1.0, x));
  V.m_winding.y += int(step(0.0, x));
  V.m_winding.z += int(step(1.0, x));

  V.m_distance.x = min(abs(x - 1.0), V.m_distance.x);
  V.m_distance.y = min(abs(x), V.m_distance.y);
  V.m_distance.z = min(abs(x + 1.0), V.m_distance.z);
}

void
astral_banded_rays_process_curve_helper_decr(float x, inout astral_banded_rays_band_value_check_neighbors V)
{
  V.m_winding.x -= int(step(-1.0, x));
  V.m_winding.y -= int(step(0.0, x));
  V.m_winding.z -= int(step(1.0, x));

  V.m_distance.x = min(abs(x - 1.0), V.m_distance.x);
  V.m_distance.y = min(abs(x), V.m_distance.y);
  V.m_distance.z = min(abs(x + 1.0), V.m_distance.z);
}

/* Compute the impact of a curve on the winding number and update the
 * distance values if the curve processed is closer. NOTE: the return
 * value is WITHOUT the winding multiplier applied. This is done as
 * a micro-optimization since the caller can multiple it at the end
 * of all curves in a band.
 * \param curve to process to test against (0, 0) with the horizontal
 *              ray to (infinity, 0).
 * \param V values to update
 */
void
astral_banded_rays_process_curve(in astral_banded_rays_curve curve,
                                 inout astral_banded_rays_band_value_check_neighbors V)
{
  astral_banded_rays_process_curve_output Q;

  astral_banded_rays_process_curve(curve, Q);
  if (Q.m_use_t1)
    {
      astral_banded_rays_process_curve_helper_incr(Q.m_x1, V);
    }

  if (Q.m_use_t2)
    {
      astral_banded_rays_process_curve_helper_decr(Q.m_x2, V);
    }
}

/*
 * \param curve_location lcoation in fp16 data for curves
 * \param number_curves number of curves
 * \param path_coord point in path coordinates to compute the
 *                   winding and nearest curve
 * \param winding winding number output value
 * \param dist update to nearest curve distance values.
 */
void
astral_banded_rays_process_band(in uint curve_location,
                                in uint number_curves,
                                in vec2 path_coord,
                                in float em, in float widen,
                                out astral_banded_rays_band_value_check_neighbors V)
{
  uint c, src;
  float early_out;

  astral_banded_rays_init_band_value(em, V);

  /* Note that we early out only if the query point is atleast
   * one and a half pixels outside of the path-rect; this way
   * if a feature touches the boundary, we still anti-alias
   * that feature.
   */
  if (number_curves == 0u
      || abs(path_coord.x) * em > em * (widen + 1.0) + 1.5
      || abs(path_coord.y) * em > em + 1.5)
    {
      return;
    }

  early_out = -1.5 - widen * em;
  src = curve_location;
  for (c = 0u; c < number_curves; ++c, src += 2u)
    {
      astral_banded_rays_curve curve;

      astral_banded_rays_load_curve(src, curve);

      /* put curve in coordinate system where path_coord is the origin */
      curve.m_p1 -= path_coord;
      curve.m_p2 -= path_coord;
      curve.m_p3 -= path_coord;
      curve.m_early_out -= path_coord.x;

      curve.m_p1.x *= em;
      curve.m_p2.x *= em;
      curve.m_p3.x *= em;
      curve.m_early_out *= em;

      /* curves are sorted so we can break out early; the early out
       * value comes from the tight bounding box of the curve instead
       * of just max'ing the defining points of the curve. Note that
       * we early out at -1.5, this is because we are computing the
       * winding number also one pixel before the point along the ray.
       */
      if (curve.m_early_out < early_out)
        break;

      astral_banded_rays_process_curve(curve, V);
    }
}

float
astral_banded_rays_signed_distance(bool filled, float distance)
{
  return (filled) ?
    distance :
    -distance;
}

vec3
astral_banded_rays_signed_distance(bvec3 filled, vec3 distance)
{
  return vec3(astral_banded_rays_signed_distance(filled.x, distance.x),
              astral_banded_rays_signed_distance(filled.y, distance.y),
              astral_banded_rays_signed_distance(filled.z, distance.z));
}

/*!
 * From winding values, fill rule and distance to nearest curve,
 * compute the distance to the boundary of the path filled with
 * a given fill rule.
 * \param V output value from astral_banded_rays_compute()
 * \param fill_rule fill rule
 * \returns the pseudo signed distance to the boundary of the
 *          path filled
 */
float
astral_banded_rays_post_process(in astral_banded_rays_value_check_neighbors V, in uint fill_rule, in float widen)
{
  uint base_fill_rule;
  float return_value;
  bvec3 horiz_filled, vert_filled;
  bool filled;

  base_fill_rule = astral_base_fill_rule(fill_rule);
  if (base_fill_rule == ASTRAL_ODD_EVEN_FILL_RULE)
    {
      V.m_vertical.m_winding = ivec3(1, 1, 1) & V.m_vertical.m_winding;
      V.m_horizontal.m_winding = ivec3(1, 1, 1) & V.m_horizontal.m_winding;
    }

  vert_filled = notEqual(ivec3(0, 0, 0), V.m_vertical.m_winding);
  horiz_filled = notEqual(ivec3(0, 0, 0), V.m_horizontal.m_winding);

  /* fatten the glyph by making the signed distance along x greater;
   * we do all three sample points because a fragment is partially
   * covered exactly when one of the neighboring samples is filled
   * differently.
   */
  if (widen > 0.0)
    {
      V.m_horizontal.m_distance = astral_banded_rays_signed_distance(horiz_filled, V.m_horizontal.m_distance);
      V.m_horizontal.m_distance += vec3(widen);
      horiz_filled = greaterThanEqual(V.m_horizontal.m_distance, vec3(0.0));
      V.m_horizontal.m_distance = abs(V.m_horizontal.m_distance);

      /* The value of V.m_vertical.m_winding is (0, 0, 0)
       * because when widen > 0.0, we do not execute the
       * vertical lines
       */
    }

  /* we will use the horizontal value to specify if inside or outside */
  filled = horiz_filled.y;

  /* post-process to remove false edges; if the surrounding
   * pixels that we computed the winding for all on the same
   * side of the fill at the pixel, then we say the edge is
   * far away.
   *
   * TODO: make this post-processing optional. It is only needed
   *       on paths with cancelling edges which is extremely rare
   *       in glyphs and somewhat rare with user defined paths.
   *       The reason being that it will filter any feature that
   *       is less than one pixel.
   */
  if (vert_filled.y == vert_filled.x
      && vert_filled.y == vert_filled.z
      && horiz_filled.y == horiz_filled.x
      && horiz_filled.y == horiz_filled.z)
    {
      return_value = V.m_max_distance;
    }
  else
    {
      return_value = V.m_horizontal.m_distance.y;
      if (widen <= 0.0)
        {
          return_value = min(return_value,
                             V.m_vertical.m_distance.y);
        }
    }

  return_value = (filled) ? return_value : -return_value;
  if (astral_fill_rule_is_complement_fill_rule(fill_rule))
    {
      return_value = -return_value;
    }

  return return_value;
}

/*!
 * Main work horse of the banded rays compute. Computes the winding
 * number at a path coordinate, the winding number of the neighboring
 * points and the unsigned psudo-distance in pixels to the nearest curve.
 * \param header_location location in shared data where astral_banded_rays_header is located
 * \param path_coord path coordinate of fragment, in the range [-1, 1]x[-1, 1]
 * \param path_coord_fwidth value of fwidth(path_coord)
 * \param[out] V winding numbers and distance to nearest curve
 */
vec2
astral_banded_rays_compute(in uint header_location,
                           in vec2 path_coord,
                           in vec2 path_coord_fwidth,
                           float widen,
                           out astral_banded_rays_value_check_neighbors V)
{
  astral_banded_rays_header header;
  astral_banded_rays_bands bands;
  vec2 em;

  em = 1.0 / path_coord_fwidth;

  V.m_max_distance = 2.0 * max(em.x, em.y);
  astral_banded_rays_load_header(header_location, header);
  astral_banded_rays_compute_bands(header, path_coord, bands);

  if (header.m_num_horizontal_bands > 0u)
    {
      vec2 p;
      int winding_multiplier;

      p.x = abs(path_coord.x);
      p.y = path_coord.y;
      winding_multiplier = (p.x < 0.0) ? -1 : 1;

      astral_banded_rays_process_band(bands.m_horizontal_band,
                                      bands.m_number_curves_in_horizontal_band,
                                      p, em.x, widen,
                                      V.m_horizontal);
      V.m_horizontal.m_winding *= int(winding_multiplier);
    }

  if (header.m_num_vertical_bands > 0u && widen <= 0.0)
    {
      /* note that we permute the x-y of the path coords */
      vec2 p;
      int winding_multiplier;

      p.x = abs(path_coord.y);
      p.y = path_coord.x;
      winding_multiplier = (p.y < 0.0) ? 1 : -1;

      astral_banded_rays_process_band(bands.m_vertical_band,
                                      bands.m_number_curves_in_vertical_band,
                                      p, em.y, 0.0,
                                      V.m_vertical);
      V.m_vertical.m_winding *= int(winding_multiplier);
    }

  return em;
}

/*!
 * Compute the signed distance in pixels from the passed
 * coordinate in path coordinates to the boundary of the
 * *filled* path.
 * \param header_location location to header for the path data
 * \param path_coord path coordinate at which to compute the
 *                   pseudo-distance. Recall that the path's
 *                   bounding box is [-1, 1]x[-1, 1].
 * \param path_coord_fwidth the value of fwidth(path_coord)
 * \param[out] V location to which to write the winding
 *               number values and the unsigned distance to the
 *               nearest curve.
 * \returns a pseudo-distance in pixels to the filled path
 */
float
astral_banded_rays_compute_distance_to_filled_path(in uint header_location,
                                                   in vec2 path_coord,
                                                   in vec2 path_coord_fwidth,
                                                   in uint fill_rule,
                                                   in float widen,
                                                   out astral_banded_rays_value_check_neighbors V)
{
  vec2 em;

  em = astral_banded_rays_compute(header_location,
                                  path_coord,
                                  path_coord_fwidth,
                                  widen,
                                  V);

  return astral_banded_rays_post_process(V, fill_rule, widen * em.x);
}

/*!
 * Compute the partial coverage at a logical coordinate
 * \param logical_coord LOGICAL coordinate, i.e. before
 *                      the transformation as specified by
 *                      the layer
 * \param logical_coord_fwidth the value of fwidth(logical_coord_fwidth)
 * \param L layer
 * \param out_coverage location to which to write the coverage
 * \returns the distance, clamped to the nearest curve
 */
float
astral_banded_rays_process_layer_neighbor_pixel_distance(in vec2 logical_coord,
                                                         in vec2 logical_coord_fwidth,
                                                         in astral_banded_rays_layer L,
                                                         in float widen)
{
  vec2 path_coord, path_coord_fwidth;
  astral_banded_rays_value_check_neighbors V;

  path_coord = L.m_scale * logical_coord + L.m_translate;
  path_coord_fwidth = L.m_scale * logical_coord_fwidth;

  return astral_banded_rays_compute_distance_to_filled_path(L.m_header_offset,
                                                            path_coord,
                                                            path_coord_fwidth,
                                                            L.m_fill_rule,
                                                            widen, V);
}

/*!
 * Return the color of the layer without alpha pre-multiplied and
 * compute the partial coverage at a logical coordinate
 * \param logical_coord LOGICAL coordinate, i.e. before
 *                      the transformation as specified by
 *                      the layer
 * \param logical_coord_fwidth the value of fwidth(logical_coord_fwidth)
 * \param L layer
 * \param out_coverage location to which to write the coverage
 * \returns the color of the layer without alpha pre-multiplied
 */
vec4
astral_banded_rays_process_layer_neighbor_pixel(in vec2 logical_coord,
                                                in vec2 logical_coord_fwidth,
                                                in astral_banded_rays_layer L,
                                                in float widen,
                                                out float out_coverage)
{
  float d;

  d = astral_banded_rays_process_layer_neighbor_pixel_distance(logical_coord,
                                                               logical_coord_fwidth,
                                                               L, widen);

  /* the value returned is the signed distance to the
   * boundary, so the coverage is that value plus 0.5
   * clamped to [0.0, 1.0].
   */
  out_coverage = clamp(d + 0.5, 0.0, 1.0);

  return L.m_color;
}



/*! @} */
