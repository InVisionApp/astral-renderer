// -*- C++ -*-
/*!
 * \file astral_conic_shadow.frag.glsl.resource_string
 * \brief astral_conic_shadow.frag.glsl.resource_string
 *
 * Copyright 2020 by InvisionApp.
 *
 * Contact: kevinrogovin@invisionapp.com
 *
 * This Source Code Form is subject to the
 * terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with
 * this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 *
 */

void
astral_pre_frag_shader(in uint sub_shader, in uint item_data_location)
{
}

void
astral_frag_shader(in uint sub_shader, in uint item_data_location,
                   out float depth_value)
{
  bool use_t0, use_t1;
  float tau_y, t0, t1;
  vec2 p0, wp1, p2, Mbottom_row;
  float q0_y, wq1_y, q2_y;
  float A, B, C, depth;

  if (astral_y_coord < 1.0)
    {
      /* on y-min side */
      tau_y = -1.0;
    }
  else
    {
      /* on y-max side */
      tau_y = 1.0;
    }

  p0 = vec2(astral_conic_p0_x, astral_conic_p0_y);
  p2 = vec2(astral_conic_p2_x, astral_conic_p2_y);

  /* Let
   *
   *     | R       tau_y |
   * M = | -tau_y   R    |
   *
   * which maps (R, tau_y) to (R * R + 1, 0). We will
   * then use the same math as found in astral_banded_rays
   * compute the intersection of the ray from (0, 0)
   * to (R * R + 1, 0) against M(p).
   */
  Mbottom_row = vec2(-tau_y, astral_R_value);

  /* Let [q0, wq1, q2] be M([p0, wp1, p2]), then the
   * intersection of p(t) against that from (0, 0) to
   * (R, tau_y)) corresponds to the the intersection
   * of q(t) against y = 0. To do so, we will use the
   * same math as found astral_banded_rays.
   */
  q0_y = dot(p0, Mbottom_row);
  q2_y = dot(p2, Mbottom_row);

  wp1 = vec2(astral_conic_wp1_x, astral_conic_wp1_y);
  wq1_y = dot(wp1, Mbottom_row);

  A = q0_y - 2.0 * wq1_y + q2_y;
  B = q0_y - wq1_y;
  C = q0_y;

  /* The additional conditions are for handling
   * if q2_y or q0_y is zero. The side condition
   * with wq1 is about the nature of t0 and t1.
   */
  use_t0 = (q2_y <= 0.0 && max(q0_y, wq1_y) > 0.0)
    || (q0_y > 0.0 && wq1_y < 0.0)
    || (q0_y == 0.0 && wq1_y <= 0.0)
    || (q2_y == 0.0 && wq1_y >= 0.0);

  use_t1 = (q0_y <= 0.0 && max(wq1_y, q2_y) > 0.0)
    || (q2_y > 0.0 && wq1_y < 0.0)
    || (q0_y == 0.0 && wq1_y >= 0.0)
    || (q2_y == 0.0 && wq1_y <= 0.0);

  const float tiny = 0.0005;
  if (abs(A) > tiny * max(abs(B), abs(C)))
    {
      float D;

      D = B * B - A * C;
      if (D < 0.0)
        {
          t0 = t1 = 0.0;
          use_t0 = use_t1 = false;
        }
      else
        {
          float recipA, rootD;

          recipA = 1.0 / A;
          rootD = sqrt(D);
          t0 = (B - rootD) * recipA;
          t1 = (B + rootD) * recipA;
        }
    }
  else
    {
      /* this essentially means that the ray is parallel to the
       * axis of symmetry of the parabola.
       */
      t0 = t1 = 0.5 * C / B;
    }

  A = p0.y - 2.0 * wp1.y + p2.y;
  B = p0.y - wp1.y;
  C = p0.y;

  depth_value = ASTRAL_SHADOW_MAP_MAX_DEPTH_VALUE;
  if (use_t0)
    {
      float v;

      t0 = clamp(t0, 0.0, 1.0);
      v = ((A * t0 - B * 2.0) * t0 + C) * tau_y;
      if (v >= 0.0)
        {
          depth_value = min(depth_value, v);
        }
    }

  if (use_t1)
    {
      float v;

      t1 = clamp(t1, 0.0, 1.0);
      v = ((A * t1 - B * 2.0) * t1 + C) * tau_y;
      if (v >= 0.0)
        {
          depth_value = min(depth_value, v);
        }
    }
}
