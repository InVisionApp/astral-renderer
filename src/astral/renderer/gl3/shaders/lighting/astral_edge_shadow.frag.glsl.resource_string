// -*- C++ -*-
/*!
 * \file astral_edge_shadow.frag.glsl.resource_string
 * \brief astral_edge_shadow.frag.glsl.resource_string
 *
 * Copyright 2020 by InvisionApp.
 *
 * Contact: kevinrogovin@invisionapp.com
 *
 * This Source Code Form is subject to the
 * terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with
 * this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 *
 */

void
astral_pre_frag_shader(in uint sub_shader, in uint item_data_location)
{
}

void
astral_frag_shader(in uint sub_shader, in uint item_data_location,
                   out float depth_value)
{
  vec2 p, q;
  float tau_y, mapped_p_y, mapped_q_y, max_y, min_y;
  vec2 Mbottom_row;

  p = vec2(astral_edge_p_x, astral_edge_p_y);
  q = vec2(astral_edge_q_x, astral_edge_q_y);

  if (astral_y_coord < 1.0)
    {
      /* on y-min side */
      tau_y = -1.0;
    }
  else
    {
      /* on y-max side */
      tau_y = 1.0;
    }

  /* Let
   *
   *     | R       tau_y |
   * M = | -tau_y   R    |
   *
   * which maps (R, tau_y) to (R * R + 1, 0). We will
   * then use the same math as found in astral_banded_rays
   * compute the intersection of the ray from (0, 0)
   * to (R * R + 1, 0) against M(p).
   */
  Mbottom_row = vec2(-tau_y, astral_R_value);

  mapped_p_y = dot(p, Mbottom_row);
  mapped_q_y = dot(q, Mbottom_row);

  min_y = min(mapped_p_y, mapped_q_y);
  max_y = max(mapped_p_y, mapped_q_y);

  depth_value = ASTRAL_SHADOW_MAP_MAX_DEPTH_VALUE;
  if (max_y > min_y && max_y >= 0.0 && min_y <= 0.0)
    {
      float v, t;

      t = mapped_p_y / (mapped_p_y - mapped_q_y);
      v = (p.y + t * (q.y - p.y)) * tau_y;

      if (v >= 0.0)
        {
          depth_value = v;
        }
    }
}
