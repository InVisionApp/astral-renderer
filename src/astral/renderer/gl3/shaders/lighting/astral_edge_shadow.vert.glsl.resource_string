// -*- C++ -*-
/*!
 * \file astral_edge_shadow.vert.glsl.resource_string
 * \brief astral_edge_shadow.vert.glsl.resource_string
 *
 * Copyright 2020 by InvisionApp.
 *
 * Contact: kevinrogovin@invisionapp.com
 *
 * This Source Code Form is subject to the
 * terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with
 * this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 *
 */

void
astral_pre_vert_shader(in uint sub_shader, in uint item_data_location,
                       in vec4 a0, in AstralTransformation item_transformation)
{
}

vec2
astral_vert_shader(in uint sub_shader, in uint item_data_location,
                   in vec4 in_a0, in AstralTransformation item_transformation)
{
  vec2 return_value, p, q;
  vec4 p0_p1, q0_q1;
  uint static_data_offset, flags;
  float y_start, t;
  astral_edge_shadow min_side, max_side, both_sides;

  t = astral_read_item_dataf(item_data_location).x;
  static_data_offset = floatBitsToUint(in_a0.x);

  /* fetch the end points of the edge at time 0 and time 1 */
  p0_p1 = astral_read_static_data32f(static_data_offset + 0u);
  q0_q1 = astral_read_static_data32f(static_data_offset + 1u);

  /* mix to get the end points of the edge at time t */
  p = mix(p0_p1.xy, p0_p1.zw, t);
  q = mix(q0_q1.xy, q0_q1.zw, t);

  /* map from path logical coordinates to coordinates where light is at (0, 0) */
  p = astral_apply_transformation(item_transformation, p);
  q = astral_apply_transformation(item_transformation, q);

  if (sub_shader == ASTRAL_SHADOW_X_SIDE)
    {
      /* by permuting x and y, we can assume below we are
       * computing for the y-sides
       */
      p.xy = p.yx;
      q.xy = q.yx;
      y_start = 2.0;
    }
  else
    {
      y_start = 0.0;
    }

  astral_edge_shadow_compute_range_min_y_side(p, q, ASTRAL_MIN_SIDE_ACTIVE, min_side);
  astral_edge_shadow_compute_range_max_y_side(p, q, ASTRAL_MAX_SIDE_ACTIVE, max_side);
  astral_edge_shadow_union(min_side, max_side, both_sides);

  astral_edge_p_x = p.x;
  astral_edge_p_y = p.y;
  astral_edge_q_x = q.x;
  astral_edge_q_y = q.y;

  if (both_sides.m_flags == 0u)
    {
      astral_y_coord = 0.0;
      astral_R_value = -2.0;

      /* make it degenerate */
      return_value = vec2(0.0, 0.0);
    }
  else
    {
      float min_x, max_x, min_y, max_y;

      astral_edge_shadow_inflate(both_sides, min_x, max_x);
      min_y = (min_side.m_flags != 0u) ? 0.0 : 1.0;
      max_y = (max_side.m_flags != 0u) ? 2.0 : 1.0;

      /* We are using the same attribute data as used for
       * AA-fuzz for path fills.
       *  - a0.y is 0 or 1 (used in fuzz to indicates handling p or q)
       *  - a0.z is -1 or 1 (used in fuzz to indicate what side to push out from the edge)
       *
       * Thus, astral_R_value nartually uses a0.z and astral_y_coord
       * naturally uses 2.0 * a0.y; the reason for the 2.0 multiply is
       * because we are rendering a strip of texels two pixels in tall.
       */
      astral_R_value = clamp(in_a0.z, min_x, max_x);
      astral_y_coord = clamp(2.0 * in_a0.y, min_y, max_y);

      return_value = vec2(astral_R_value, y_start + astral_y_coord);
    }

  return return_value;
}
